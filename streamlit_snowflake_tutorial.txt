Chanin Nantasenamat
Chanin Nantasenamat
Apr 6

¬∑
10 min read





HANDS ON TUTORIALS
How to connect Streamlit to Snowflake
A step-by-step practical tutorial

Image generated by Chanin Nantasenamat on BlueWillow.
1. Introduction
Streamlit is a low-code web framework for the Python programming language. It allows you to build an interactive web application with minimal coding.

In this tutorial, I‚Äôll show you how to use Streamlit to create a simple web app that connects to a cloud-based Snowflake database, loads data from a database table, and write out the data.

Whether you‚Äôre a data analyst, software developer, or someone interested in building web applications with Python, this tutorial will guide you step-by-step on how to get started with Streamlit and Snowflake.

Let‚Äôs take a preview of the Streamlit app that we‚Äôre building:


2. Creating a Snowflake database
In this tutorial, we‚Äôre going to create a Snowflake database that will be connected to in the Streamlit app we‚Äôre building.

1. Sign up for a Snowflake account at https://signup.snowflake.com

2. Check your ‚ÄúWelcome to Snowflake!‚Äù email for the account URL in order to access your Snowflake account. Go ahead and click on the LOG IN TO SNOWFLAKE button or copy/paste the account URL https://<your-unique-account-id>.snowflakecomputing.com) into an internet browser.


3. Go ahead and enter your Snowflake credentials.


4. Once logged in, you‚Äôll see the Worksheets panel by default.

5. Create a new SQL Worksheet by following the following instructions:


6. Enter the following SQL query into the query box (see screenshot under the code box below):

CREATE DATABASE PETS;

CREATE TABLE MYTABLE (
    NAME            varchar(80),
    PET             varchar(80)
);

INSERT INTO MYTABLE VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');

SELECT * FROM MYTABLE;

7. The PETS database is now created. Next, click on the top-left link to return to the main page.


8. From the main page, click on the ‚ÄúData‚Äù tab to see our databases.


9. Here, we can see our newly created PETS database.


Now that our database is ready, let‚Äôs proceed to setting up our coding environment.

3. Setting up a coding environment
Creating a conda environment
Firstly, let‚Äôs create a conda environment called snowpark by entering the following into a terminal (also referred to as the command line) window:

conda create -n snowpark python=3.8
In a few moments, you will see conda asking you to confirm that it will install the following new packages. To confirm enter Y


Give it a few moments for the various Python libraries to be installed.

Once everything is all setup and ready to go, there will be a message at the bottom with instructions on how to activate and deactivate the environment.


Activating the conda environment
As instructed above, we can activate the conda environment called snowpark by entering the following into a terminal window:

conda activate snowpark
Once the conda environment has been activated, you‚Äôll notice the name of the conda environment will be shown in parenthesis to the left of the terminal prompt.

Particularly, in the first screenshot below, we‚Äôre using the base environment (note the (base) to the left of the username) whereas the second screenshot shows the activated snowpark conda environment (note (snowpark)to the left of the username).



Next, we‚Äôll want to install some prerequisite Python libraries so that we can build a Streamlit app that can connect with a Snowflake database.

To a terminal prompt, enter the following:

pip install snowflake-snowpark-python streamlit
This will install the above 2 Python libraries:


Congratulations, your coding environment is now ready for us to play with!

Deactivating the conda environment
Finally, when we‚Äôre finished with our coding session, we can exit the conda environment by entering the following into a terminal window:

conda deactivate
As soon as the conda environment is deactivated, you‚Äôll notice that we will exit to the (base) environment.


4. Setting up directories and files
Navigating directories
Firstly, you‚Äôll want to figure out where you are in terms of the current directory path.

To do this, enter pwd into the terminal prompt.

pwd

You‚Äôll see that on my computer, I‚Äôm at /Users/chanin. Let‚Äôs say I want to navigate to my working directory at /Users/chanin/Documents/sandbox then I‚Äôll want to change directory via the cd command followed by the 2 sub-folders Documents/sandbox.

cd Documents/sandbox

Creating directories
Go ahead and create the snowflake-first-app directory via the mkdir command:

mkdir snowflake-first-app
Next, let‚Äôs change into the newly created directory:

cd snowflake-first-app
Creating files
Finally, let‚Äôs create 2 empty files for our Streamlit app that we will cover in more depth in the next section:

touch streamlit_app.py
mkdir .streamlit
touch .streamlit/secrets.toml
Listing directory content
To see the content of the current directory that we‚Äôre in, we can use the ls command:


Wait a minute, why are we seeing only 1 file when we had already created 2 files. The missing file is the secrets.toml file that resides in a hidden .streamlit directory.

To see the hidden directory, we‚Äôre going to need to add an additional parameter -a as shown below:

ls -a

Now we can see the hidden directory!

Here, we can notice that the contents are listed horizontally, what if we want to list the contents vertically? Then we are going to need an additional parameter -l as shown below:

ls -a -l

Not only can we see the content list as a vertical list, we can also see other information about the contents such as it‚Äôs read/write permission, file size, file creation/modification date, etc.

5. Building the Streamlit app
Now that the conda environment is ready, let‚Äôs proceed to building the app.

Firstly, let‚Äôs populate your streamlit_app.py file with the following code:

# Modified from Johannes Rieke's example code

import streamlit as st
from snowflake.snowpark import Session

st.title('‚ùÑÔ∏è How to connect Streamlit to a Snowflake database')

# Establish Snowflake session
@st.cache_resource
def create_session():
    return Session.builder.configs(st.secrets.snowflake).create()

session = create_session()
st.success("Connected to Snowflake!")

# Load data table
@st.cache_data
def load_data(table_name):
    ## Read in data table
    st.write(f"Here's some example data from `{table_name}`:")
    table = session.table(table_name)
    
    ## Do some computation on it
    table = table.limit(100)
    
    ## Collect the results. This will run the query and download the data
    table = table.collect()
    return table

# Select and display data table
table_name = "PETS.PUBLIC.MYTABLE"

## Display data table
with st.expander("See Table"):
    df = load_data(table_name)
    st.dataframe(df)

## Writing out data
for row in df:
    st.write(f"{row[0]} has a :{row[1]}:")
To do this in the terminal, great going to use the Vim text editor, which can be called via the vi command followed by the file name.

vi streamlit_app.py
This will launch your Vim text editor for editing the file content of streamlit_app.py


Then, hit on the i key and you should see at the bottom of the terminal window that the editor is in INSERT mode.


Next, paste the copied contents into the file by pressing Ctrl+V in Windows or CMD+V in Mac OSX.

Afterwards, hit on the Esc button and enter the following followed by hitting the Enter key:

:wq!
which literally means to write the contents to file and quit the text editor.

To ensure that the content has been pasted in properly, let‚Äôs view the file content by using the cat command:

cat streamlit_app.py

Now that the streamlit_app.py file is ready, let‚Äôs proceed to our Snowflake access credential.

6. Adding access credentials via secrets management
Remember the .streamlit/secrets.toml file that we created earlier, we‚Äôre now going to populate that file with the following content:

[snowflake]
user = "enter_your_password_here"
password = "enter_your_password_here"
account = "enter_your_account_key_here"

Save and exit (refer to earlier for instructions on how) the editor.

Congratulations, you‚Äôre app is now complete and is now ready to be launched!

üí° Note:
- Your "user" and "password" was set by you when registering for your Snowflake account.
- Your "account" key is the sub-domain name from the "account URL" that was sent to you in the "Welcome to Snowflake!" email. 
(See the above screenshot for the "user" and "account" details)
7. Launching the Streamlit app
Now that our streamlit_app.py and .streamlit/secrets.toml files are ready, let‚Äôs head back to the terminal and let‚Äôs launch the Streamlit app.

Go ahead and enter the following to the terminal window:

streamlit run streamlit_app.py
In a few moments, you‚Äôll notice the following messages in the terminal window that provides instructions on accessing the Streamlit app.


At the same time, you should be able to see a new internet browser launching with the Streamlit app that is located locally at http://localhost:8503


8. Line-by-line code explanation
At a conceptual level, the Streamlit Python library was used to connect to a Snowflake database, loads data from a database table and displays the data in the app.

1. Import required Python libraries (namely streamlit and snowpark).

import streamlit as st
from snowflake.snowpark import Sessionp
2. Sets the title of the Streamlit app to "‚ùÑÔ∏è How to connect Streamlit to a Snowflake database"

st.title('‚ùÑÔ∏è How to connect Streamlit to a Snowflake database')p
3. Defines a custom function to create a Snowflake session and caches the session using Streamlit‚Äôs caching mechanism.

# Establish Snowflake session
@st.cache_resource
def create_session():
    return Session.builder.configs(st.secrets.snowflake).create()

session = create_session()
st.success("Connected to Snowflake!")
4. Loads data from a table in the Snowflake database using a function that caches the result.

# Load data table
@st.cache_data
def load_data(table_name):
    ## Read in data table
    st.write(f"Here's some example data from `{table_name}`:")
    table = session.table(table_name)
    
    ## Do some computation on it
    table = table.limit(100)
    
    ## Collect the results. This will run the query and download the data
    table = table.collect()
    return table
5. Displays the loaded data in a Streamlit app, inside a collapsible expander.

# Select and display data table
table_name = "PETS.PUBLIC.MYTABLE"

## Display data table
with st.expander("See Table"):
    df = load_data(table_name)
    st.dataframe(df)
6. Writes out the loaded data via st.write by iterating over the rows in the data table.

In conjunction with st.write, f-string is used to combine static text with dynamic values from the first column (row[0]) and second column (row[1]) of each row from the data table.

Emojis are displayed with the help of colons before and after the row[1] value.

## Writing out data
for row in df:
    st.write(f"{row[0]} has a :{row[1]}:")
9. Summary
In summary, this tutorial has shown you how to create a web app using Streamlit that connects to a Snowflake database. This represents an essential starter template that you can extend to build even more complex data-driven web apps.

If you have any questions, please leave them in the comments below or contact me on Twitter at @thedataprof or on LinkedIn.